{"version":3,"mappings":"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","names":["appServicesAuthTokenUrl","appServicesAuthTokenRefreshUrl","appServicesAuthLogoutUrl","fetchAuthSetup","response","authSetup","useLogin","requireAccessControl","msalConfig","loginRequest","tokenRequest","getRedirectUri","getAppServicesToken","r","json","acc","item","appServicesToken","appServicesLogout","isLoggedIn","client","getToken","error","github","LoginButton","instance","useMsal","activeAccount","handleLoginPopup","handleLogoutPopup","logoutText","jsx","DefaultButton","styles","Layout","jsxs","Link","NavLink","isActive","Outlet","BACKEND_URI","getHeaders","idToken","headers","askApi","request","parsedResponse","configApi","chatApi","getCitationFilePath","citation","RetrievalMode","GPT4VInput","VectorFieldOptions","parseAnswerToHtml","answer","isStreaming","onCitationClicked","citations","parsedAnswer","lastIndex","i","part","index","citationIndex","path","renderToStaticMarkup","AnswerIcon","Sparkle28Filled","Answer","isSelected","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","showFollowupQuestions","followupQuestions","messageContent","useMemo","sanitizedAnswerHtml","DOMPurify","Stack","IconButton","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","onRetry","ErrorCircle24Regular","PrimaryButton","QuestionInput","onSend","disabled","placeholder","clearOnSend","initQuestion","question","setQuestion","useState","useEffect","sendQuestion","onEnterPress","ev","onQuestionChange","_ev","newValue","disableRequiredAccessControl","sendQuestionDisabled","TextField","Tooltip","Button","Send28Filled","Example","text","value","onClick","DEFAULT_EXAMPLES","GPT4V_EXAMPLES","ExampleList","onExampleClicked","useGPT4V","UserChatMessage","message","parseSupportingContentItem","parts","title","content","SupportingContent","supportingContent","textItems","imageItems","ind","parsed","img","AnalysisPanelTabs","ThoughtProcess","thoughts","t","SyntaxHighlighter","Fragment","k","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledThoughtProcessTab","isDisabledSupportingContentTab","isDisabledCitationTab","setCitation","fetchCitation","token","originalHash","citationContent","citationObjectUrl","Pivot","pivotItem","PivotItem","SettingsButton","Settings24Regular","ClearChatButton","Delete24Regular","vectorFields","VectorSettings","updateRetrievalMode","updateVectorFields","showImageOptions","retrievalMode","setRetrievalMode","vectorFieldOption","setVectorFieldOption","onRetrievalModeChange","option","onVectorFieldsChange","list","Dropdown","ChoiceGroup","TokenClaimsDisplay","ToString","a","items","o","key","originalKey","columns","createTableColumn","b","Label","DataGrid","DataGridHeader","DataGridRow","renderHeaderCell","DataGridHeaderCell","DataGridBody","rowId","renderCell","DataGridCell","GPT4VSettings","updateGPT4VInputs","updateUseGPT4V","isUseGPT4V","gpt4vInputs","setUseGPT4V","onuseGPT4V","checked","onSetGPT4VInput","data","Checkbox","Chat","isConfigPanelOpen","setIsConfigPanelOpen","promptTemplate","setPromptTemplate","temperature","setTemperature","retrieveCount","setRetrieveCount","useSemanticRanker","setUseSemanticRanker","shouldStream","setShouldStream","useSemanticCaptions","setUseSemanticCaptions","excludeCategory","setExcludeCategory","useSuggestFollowupQuestions","setUseSuggestFollowupQuestions","vectorFieldList","setVectorFieldList","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","gpt4vInput","setGPT4VInput","lastQuestionRef","useRef","chatMessageStreamEnd","isLoading","setIsLoading","setIsStreaming","setError","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","answers","setAnswers","streamedAnswers","setStreamedAnswers","showGPT4VOptions","setShowGPT4VOptions","showSemanticRankerOption","setShowSemanticRankerOption","showVectorOption","setShowVectorOption","getConfig","config","handleAsyncRequest","responseBody","askResponse","updateState","newContent","resolve","latestResponse","event","readNDJSONStream","makeApiRequest","e","clearChat","onPromptTemplateChange","onTemperatureChange","range","onRetrieveCountChange","onUseSemanticRankerChange","onUseSemanticCaptionsChange","onShouldStreamChange","onExcludeCategoryChanged","onUseSuggestFollowupQuestionsChange","onUseOidSecurityFilterChange","onUseGroupsSecurityFilterChange","example","onShowCitation","onToggleTab","tab","streamedAnswer","c","q","SparkleFilled","x","Panel","Slider","SpinButton","inputs","options","layout","msalInstance","PublicClientApplication","EventType","account","MsalProvider","initializeIcons","router","createHashRouter","__vitePreload","ReactDOM","React","RouterProvider"],"sources":["../../../frontend/src/authConfig.ts","../../../frontend/src/assets/github.svg","../../../frontend/src/components/LoginButton/LoginButton.tsx","../../../frontend/src/pages/layout/Layout.tsx","../../../frontend/src/api/api.ts","../../../frontend/src/api/models.ts","../../../frontend/src/components/Answer/AnswerParser.tsx","../../../frontend/src/components/Answer/AnswerIcon.tsx","../../../frontend/src/components/Answer/Answer.tsx","../../../frontend/src/components/Answer/AnswerLoading.tsx","../../../frontend/src/components/Answer/AnswerError.tsx","../../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../../frontend/src/components/Example/Example.tsx","../../../frontend/src/components/Example/ExampleList.tsx","../../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../../frontend/src/components/SupportingContent/SupportingContentParser.ts","../../../frontend/src/components/SupportingContent/SupportingContent.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../../frontend/src/components/AnalysisPanel/ThoughtProcess.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanel.tsx","../../../frontend/src/components/SettingsButton/SettingsButton.tsx","../../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../../frontend/src/components/VectorSettings/VectorSettings.tsx","../../../frontend/src/components/TokenClaimsDisplay/TokenClaimsDisplay.tsx","../../../frontend/src/components/GPT4VSettings/GPT4VSettings.tsx","../../../frontend/src/pages/chat/Chat.tsx","../../../frontend/src/index.tsx"],"sourcesContent":["// Refactored from https://github.com/Azure-Samples/ms-identity-javascript-react-tutorial/blob/main/1-Authentication/1-sign-in/SPA/src/authConfig.js\r\n\r\nimport { IPublicClientApplication } from \"@azure/msal-browser\";\r\n\r\nconst appServicesAuthTokenUrl = \".auth/me\";\r\nconst appServicesAuthTokenRefreshUrl = \".auth/refresh\";\r\nconst appServicesAuthLogoutUrl = \".auth/logout?post_logout_redirect_uri=/\";\r\n\r\ninterface AppServicesToken {\r\n    id_token: string;\r\n    access_token: string;\r\n    user_claims: Record<string, any>;\r\n}\r\n\r\ninterface AuthSetup {\r\n    // Set to true if login elements should be shown in the UI\r\n    useLogin: boolean;\r\n    // Set to true if access control is enforced by the application\r\n    requireAccessControl: boolean;\r\n    /**\r\n     * Configuration object to be passed to MSAL instance on creation.\r\n     * For a full list of MSAL.js configuration parameters, visit:\r\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\r\n     */\r\n    msalConfig: {\r\n        auth: {\r\n            clientId: string; // Client app id used for login\r\n            authority: string; // Directory to use for login https://learn.microsoft.com/azure/active-directory/develop/msal-client-application-configuration#authority\r\n            redirectUri: string; // Points to window.location.origin. You must register this URI on Azure Portal/App Registration.\r\n            postLogoutRedirectUri: string; // Indicates the page to navigate after logout.\r\n            navigateToLoginRequestUrl: boolean; // If \"true\", will navigate back to the original request location before processing the auth code response.\r\n        };\r\n        cache: {\r\n            cacheLocation: string; // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\r\n            storeAuthStateInCookie: boolean; // Set this to \"true\" if you are having issues on IE11 or Edge\r\n        };\r\n    };\r\n    loginRequest: {\r\n        /**\r\n         * Scopes you add here will be prompted for user consent during sign-in.\r\n         * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\r\n         * For more information about OIDC scopes, visit:\r\n         * https://docs.microsoft.com/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\r\n         */\r\n        scopes: Array<string>;\r\n    };\r\n    tokenRequest: {\r\n        scopes: Array<string>;\r\n    };\r\n}\r\n\r\n// Fetch the auth setup JSON data from the API if not already cached\r\nasync function fetchAuthSetup(): Promise<AuthSetup> {\r\n    const response = await fetch(\"/auth_setup\");\r\n    if (!response.ok) {\r\n        throw new Error(`auth setup response was not ok: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n}\r\n\r\nconst authSetup = await fetchAuthSetup();\r\n\r\nexport const useLogin = authSetup.useLogin;\r\n\r\nexport const requireAccessControl = authSetup.requireAccessControl;\r\n\r\n/**\r\n * Configuration object to be passed to MSAL instance on creation.\r\n * For a full list of MSAL.js configuration parameters, visit:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\r\n */\r\nexport const msalConfig = authSetup.msalConfig;\r\n\r\n/**\r\n * Scopes you add here will be prompted for user consent during sign-in.\r\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\r\n * For more information about OIDC scopes, visit:\r\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\r\n */\r\nexport const loginRequest = authSetup.loginRequest;\r\n\r\nconst tokenRequest = authSetup.tokenRequest;\r\n\r\n// Build an absolute redirect URI using the current window's location and the relative redirect URI from auth setup\r\nexport const getRedirectUri = () => {\r\n    return window.location.origin + authSetup.msalConfig.auth.redirectUri;\r\n};\r\n\r\n// Get an access token if a user logged in using app services authentication\r\n// Returns null if the app doesn't support app services authentication\r\nconst getAppServicesToken = (): Promise<AppServicesToken | null> => {\r\n    return fetch(appServicesAuthTokenRefreshUrl).then(r => {\r\n        if (r.ok) {\r\n            return fetch(appServicesAuthTokenUrl).then(r => {\r\n                if (r.ok) {\r\n                    return r.json().then(json => {\r\n                        if (json.length > 0) {\r\n                            return {\r\n                                id_token: json[0][\"id_token\"] as string,\r\n                                access_token: json[0][\"access_token\"] as string,\r\n                                user_claims: json[0][\"user_claims\"].reduce((acc: Record<string, any>, item: Record<string, any>) => {\r\n                                    acc[item.typ] = item.val;\r\n                                    return acc;\r\n                                }, {}) as Record<string, any>\r\n                            };\r\n                        }\r\n\r\n                        return null;\r\n                    });\r\n                }\r\n\r\n                return null;\r\n            });\r\n        }\r\n\r\n        return null;\r\n    });\r\n};\r\n\r\nexport const appServicesToken = await getAppServicesToken();\r\n\r\n// Sign out of app services\r\n// Learn more at https://learn.microsoft.com/azure/app-service/configure-authentication-customize-sign-in-out#sign-out-of-a-session\r\nexport const appServicesLogout = () => {\r\n    window.location.href = appServicesAuthLogoutUrl;\r\n};\r\n\r\n// Determine if the user is logged in\r\n// The user may have logged in either using the app services login or the on-page login\r\nexport const isLoggedIn = (client: IPublicClientApplication | undefined): boolean => {\r\n    return client?.getActiveAccount() != null || appServicesToken != null;\r\n};\r\n\r\n// Get an access token for use with the API server.\r\n// ID token received when logging in may not be used for this purpose because it has the incorrect audience\r\n// Use the access token from app services login if available\r\nexport const getToken = (client: IPublicClientApplication): Promise<string | undefined> => {\r\n    if (appServicesToken) {\r\n        return Promise.resolve(appServicesToken.access_token);\r\n    }\r\n\r\n    return client\r\n        .acquireTokenSilent({\r\n            ...tokenRequest,\r\n            redirectUri: getRedirectUri()\r\n        })\r\n        .then(r => r.accessToken)\r\n        .catch(error => {\r\n            console.log(error);\r\n            return undefined;\r\n        });\r\n};\r\n","export default \"__VITE_ASSET__4e6ad5ae__\"","import { DefaultButton } from \"@fluentui/react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\n\r\nimport styles from \"./LoginButton.module.css\";\r\nimport { getRedirectUri, loginRequest } from \"../../authConfig\";\r\nimport { appServicesToken, appServicesLogout } from \"../../authConfig\";\r\n\r\nexport const LoginButton = () => {\r\n    const { instance } = useMsal();\r\n    const activeAccount = instance.getActiveAccount();\r\n    const isLoggedIn = (activeAccount || appServicesToken) != null;\r\n\r\n    const handleLoginPopup = () => {\r\n        /**\r\n         * When using popup and silent APIs, we recommend setting the redirectUri to a blank page or a page\r\n         * that does not implement MSAL. Keep in mind that all redirect routes must be registered with the application\r\n         * For more information, please follow this link: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#redirecturi-considerations\r\n         */\r\n        instance\r\n            .loginPopup({\r\n                ...loginRequest,\r\n                redirectUri: getRedirectUri()\r\n            })\r\n            .catch(error => console.log(error));\r\n    };\r\n    const handleLogoutPopup = () => {\r\n        if (activeAccount) {\r\n            instance\r\n                .logoutPopup({\r\n                    mainWindowRedirectUri: \"/\", // redirects the top level app after logout\r\n                    account: instance.getActiveAccount()\r\n                })\r\n                .catch(error => console.log(error));\r\n        } else {\r\n            appServicesLogout();\r\n        }\r\n    };\r\n    const logoutText = `Logout\\n${activeAccount?.username ?? appServicesToken?.user_claims?.preferred_username}`;\r\n    return (\r\n        <DefaultButton\r\n            text={isLoggedIn ? logoutText : \"Login\"}\r\n            className={styles.loginButton}\r\n            onClick={isLoggedIn ? handleLogoutPopup : handleLoginPopup}\r\n        ></DefaultButton>\r\n    );\r\n};\r\n","import { Outlet, NavLink, Link } from \"react-router-dom\";\r\n\r\nimport github from \"../../assets/github.svg\";\r\n\r\nimport styles from \"./Layout.module.css\";\r\n\r\nimport { useLogin } from \"../../authConfig\";\r\n\r\nimport { LoginButton } from \"../../components/LoginButton\";\r\n\r\nconst Layout = () => {\r\n    return (\r\n        <div className={styles.layout}>\r\n            <header className={styles.header} role={\"banner\"}>\r\n                <div className={styles.headerContainer}>\r\n                    <Link to=\"/\" className={styles.headerTitleContainer}>\r\n                        <h3 className={styles.headerTitle}>GPT + Enterprise data | Sample</h3>\r\n                    </Link>\r\n                    <nav>\r\n                        <ul className={styles.headerNavList}>\r\n                            <li>\r\n                                <NavLink to=\"/\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\r\n                                    Chat\r\n                                </NavLink>\r\n                            </li>\r\n                            <li className={styles.headerNavLeftMargin}>\r\n                                <NavLink to=\"/qa\" className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}>\r\n                                    Ask a question\r\n                                </NavLink>\r\n                            </li>\r\n                            <li className={styles.headerNavLeftMargin}>\r\n                                <a href=\"https://aka.ms/entgptsearch\" target={\"_blank\"} title=\"Github repository link\">\r\n                                    <img\r\n                                        src={github}\r\n                                        alt=\"Github logo\"\r\n                                        aria-label=\"Link to github repository\"\r\n                                        width=\"20px\"\r\n                                        height=\"20px\"\r\n                                        className={styles.githubLogo}\r\n                                    />\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                    </nav>\r\n                    <h4 className={styles.headerRightText}>Azure OpenAI + AI Search</h4>\r\n                    {useLogin && <LoginButton />}\r\n                </div>\r\n            </header>\r\n\r\n            <Outlet />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n","const BACKEND_URI = \"\";\r\n\r\nimport { ChatAppResponse, ChatAppResponseOrError, ChatAppRequest, Config } from \"./models\";\r\nimport { useLogin, appServicesToken } from \"../authConfig\";\r\n\r\nexport function getHeaders(idToken: string | undefined): Record<string, string> {\r\n    var headers: Record<string, string> = {\r\n        \"Content-Type\": \"application/json\"\r\n    };\r\n    // If using login and not using app services, add the id token of the logged in account as the authorization\r\n    if (useLogin && appServicesToken == null) {\r\n        if (idToken) {\r\n            headers[\"Authorization\"] = `Bearer ${idToken}`;\r\n        }\r\n    }\r\n\r\n    return headers;\r\n}\r\n\r\nexport async function askApi(request: ChatAppRequest, idToken: string | undefined): Promise<ChatAppResponse> {\r\n    const response = await fetch(`${BACKEND_URI}/ask`, {\r\n        method: \"POST\",\r\n        headers: getHeaders(idToken),\r\n        body: JSON.stringify(request)\r\n    });\r\n\r\n    const parsedResponse: ChatAppResponseOrError = await response.json();\r\n    if (response.status > 299 || !response.ok) {\r\n        throw Error(parsedResponse.error || \"Unknown error\");\r\n    }\r\n\r\n    return parsedResponse as ChatAppResponse;\r\n}\r\n\r\nexport async function configApi(idToken: string | undefined): Promise<Config> {\r\n    const response = await fetch(`${BACKEND_URI}/config`, {\r\n        method: \"GET\",\r\n        headers: getHeaders(idToken)\r\n    });\r\n\r\n    return (await response.json()) as Config;\r\n}\r\n\r\nexport async function chatApi(request: ChatAppRequest, idToken: string | undefined): Promise<Response> {\r\n    return await fetch(`${BACKEND_URI}/chat`, {\r\n        method: \"POST\",\r\n        headers: getHeaders(idToken),\r\n        body: JSON.stringify(request)\r\n    });\r\n}\r\n\r\nexport function getCitationFilePath(citation: string): string {\r\n    return `${BACKEND_URI}/content/${citation}`;\r\n}\r\n","export const enum RetrievalMode {\r\n    Hybrid = \"hybrid\",\r\n    Vectors = \"vectors\",\r\n    Text = \"text\"\r\n}\r\n\r\nexport const enum GPT4VInput {\r\n    TextAndImages = \"textAndImages\",\r\n    Images = \"images\",\r\n    Texts = \"texts\"\r\n}\r\n\r\nexport const enum VectorFieldOptions {\r\n    Embedding = \"embedding\",\r\n    ImageEmbedding = \"imageEmbedding\",\r\n    Both = \"both\"\r\n}\r\n\r\nexport type ChatAppRequestOverrides = {\r\n    retrieval_mode?: RetrievalMode;\r\n    semantic_ranker?: boolean;\r\n    semantic_captions?: boolean;\r\n    exclude_category?: string;\r\n    top?: number;\r\n    temperature?: number;\r\n    prompt_template?: string;\r\n    prompt_template_prefix?: string;\r\n    prompt_template_suffix?: string;\r\n    suggest_followup_questions?: boolean;\r\n    use_oid_security_filter?: boolean;\r\n    use_groups_security_filter?: boolean;\r\n    use_gpt4v?: boolean;\r\n    gpt4v_input?: GPT4VInput;\r\n    vector_fields: VectorFieldOptions[];\r\n};\r\n\r\nexport type ResponseMessage = {\r\n    content: string;\r\n    role: string;\r\n};\r\n\r\nexport type Thoughts = {\r\n    title: string;\r\n    description: any; // It can be any output from the api\r\n    props?: { [key: string]: string };\r\n};\r\n\r\nexport type ResponseContext = {\r\n    data_points: string[];\r\n    followup_questions: string[] | null;\r\n    thoughts: Thoughts[];\r\n};\r\n\r\nexport type ResponseChoice = {\r\n    index: number;\r\n    message: ResponseMessage;\r\n    context: ResponseContext;\r\n    session_state: any;\r\n};\r\n\r\nexport type ChatAppResponseOrError = {\r\n    choices?: ResponseChoice[];\r\n    error?: string;\r\n};\r\n\r\nexport type ChatAppResponse = {\r\n    choices: ResponseChoice[];\r\n};\r\n\r\nexport type ChatAppRequestContext = {\r\n    overrides?: ChatAppRequestOverrides;\r\n};\r\n\r\nexport type ChatAppRequest = {\r\n    messages: ResponseMessage[];\r\n    context?: ChatAppRequestContext;\r\n    stream?: boolean;\r\n    session_state: any;\r\n};\r\n\r\nexport type Config = {\r\n    showGPT4VOptions: boolean;\r\n    showSemanticRankerOption: boolean;\r\n    showVectorOption: boolean;\r\n};\r\n","import { renderToStaticMarkup } from \"react-dom/server\";\r\nimport { getCitationFilePath } from \"../../api\";\r\n\r\ntype HtmlParsedAnswer = {\r\n    answerHtml: string;\r\n    citations: string[];\r\n};\r\n\r\nexport function parseAnswerToHtml(answer: string, isStreaming: boolean, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\r\n    const citations: string[] = [];\r\n\r\n    // trim any whitespace from the end of the answer after removing follow-up questions\r\n    let parsedAnswer = answer.trim();\r\n\r\n    // Omit a citation that is still being typed during streaming\r\n    if (isStreaming) {\r\n        let lastIndex = parsedAnswer.length;\r\n        for (let i = parsedAnswer.length - 1; i >= 0; i--) {\r\n            if (parsedAnswer[i] === \"]\") {\r\n                break;\r\n            } else if (parsedAnswer[i] === \"[\") {\r\n                lastIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        const truncatedAnswer = parsedAnswer.substring(0, lastIndex);\r\n        parsedAnswer = truncatedAnswer;\r\n    }\r\n\r\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\r\n\r\n    const fragments: string[] = parts.map((part, index) => {\r\n        if (index % 2 === 0) {\r\n            return part;\r\n        } else {\r\n            let citationIndex: number;\r\n            if (citations.indexOf(part) !== -1) {\r\n                citationIndex = citations.indexOf(part) + 1;\r\n            } else {\r\n                citations.push(part);\r\n                citationIndex = citations.length;\r\n            }\r\n\r\n            const path = getCitationFilePath(part);\r\n\r\n            return renderToStaticMarkup(\r\n                <a className=\"supContainer\" title={part} onClick={() => onCitationClicked(path)}>\r\n                    <sup>{citationIndex}</sup>\r\n                </a>\r\n            );\r\n        }\r\n    });\r\n\r\n    return {\r\n        answerHtml: fragments.join(\"\"),\r\n        citations\r\n    };\r\n}\r\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\r\n\r\nexport const AnswerIcon = () => {\r\n    return <Sparkle28Filled primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\r\n};\r\n","import { useMemo } from \"react\";\r\nimport { Stack, IconButton } from \"@fluentui/react\";\r\nimport DOMPurify from \"dompurify\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\n\r\nimport { ChatAppResponse, getCitationFilePath } from \"../../api\";\r\nimport { parseAnswerToHtml } from \"./AnswerParser\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\n\r\ninterface Props {\r\n    answer: ChatAppResponse;\r\n    isSelected?: boolean;\r\n    isStreaming: boolean;\r\n    onCitationClicked: (filePath: string) => void;\r\n    onThoughtProcessClicked: () => void;\r\n    onSupportingContentClicked: () => void;\r\n    onFollowupQuestionClicked?: (question: string) => void;\r\n    showFollowupQuestions?: boolean;\r\n}\r\n\r\nexport const Answer = ({\r\n    answer,\r\n    isSelected,\r\n    isStreaming,\r\n    onCitationClicked,\r\n    onThoughtProcessClicked,\r\n    onSupportingContentClicked,\r\n    onFollowupQuestionClicked,\r\n    showFollowupQuestions\r\n}: Props) => {\r\n    const followupQuestions = answer.choices[0].context.followup_questions;\r\n    const messageContent = answer.choices[0].message.content;\r\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(messageContent, isStreaming, onCitationClicked), [answer]);\r\n\r\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\r\n\r\n    return (\r\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\r\n            <Stack.Item>\r\n                <Stack horizontal horizontalAlign=\"space-between\">\r\n                    <AnswerIcon />\r\n                    <div>\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"Lightbulb\" }}\r\n                            title=\"Show thought process\"\r\n                            ariaLabel=\"Show thought process\"\r\n                            onClick={() => onThoughtProcessClicked()}\r\n                            disabled={!answer.choices[0].context.thoughts?.length}\r\n                        />\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"ClipboardList\" }}\r\n                            title=\"Show supporting content\"\r\n                            ariaLabel=\"Show supporting content\"\r\n                            onClick={() => onSupportingContentClicked()}\r\n                            disabled={!answer.choices[0].context.data_points}\r\n                        />\r\n                    </div>\r\n                </Stack>\r\n            </Stack.Item>\r\n\r\n            <Stack.Item grow>\r\n                <div className={styles.answerText} dangerouslySetInnerHTML={{ __html: sanitizedAnswerHtml }}></div>\r\n            </Stack.Item>\r\n\r\n            {!!parsedAnswer.citations.length && (\r\n                <Stack.Item>\r\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\r\n                        <span className={styles.citationLearnMore}>Citations:</span>\r\n                        {parsedAnswer.citations.map((x, i) => {\r\n                            const path = getCitationFilePath(x);\r\n                            return (\r\n                                <a key={i} className={styles.citation} title={x} onClick={() => onCitationClicked(path)}>\r\n                                    {`${++i}. ${x}`}\r\n                                </a>\r\n                            );\r\n                        })}\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n\r\n            {!!followupQuestions?.length && showFollowupQuestions && onFollowupQuestionClicked && (\r\n                <Stack.Item>\r\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\r\n                        <span className={styles.followupQuestionLearnMore}>Follow-up questions:</span>\r\n                        {followupQuestions.map((x, i) => {\r\n                            return (\r\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\r\n                                    {`${x}`}\r\n                                </a>\r\n                            );\r\n                        })}\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { Stack } from \"@fluentui/react\";\r\nimport { animated, useSpring } from \"@react-spring/web\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\n\r\nexport const AnswerLoading = () => {\r\n    const animatedStyles = useSpring({\r\n        from: { opacity: 0 },\r\n        to: { opacity: 1 }\r\n    });\r\n\r\n    return (\r\n        <animated.div style={{ ...animatedStyles }}>\r\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n                <AnswerIcon />\r\n                <Stack.Item grow>\r\n                    <p className={styles.answerText}>\r\n                        Generating answer\r\n                        <span className={styles.loadingdots} />\r\n                    </p>\r\n                </Stack.Item>\r\n            </Stack>\r\n        </animated.div>\r\n    );\r\n};\r\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\r\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\n\r\ninterface Props {\r\n    error: string;\r\n    onRetry: () => void;\r\n}\r\n\r\nexport const AnswerError = ({ error, onRetry }: Props) => {\r\n    return (\r\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\r\n\r\n            <Stack.Item grow>\r\n                <p className={styles.answerText}>{error}</p>\r\n            </Stack.Item>\r\n\r\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\r\n        </Stack>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { Stack, TextField } from \"@fluentui/react\";\r\nimport { Button, Tooltip, Field, Textarea } from \"@fluentui/react-components\";\r\nimport { Send28Filled } from \"@fluentui/react-icons\";\r\nimport { isLoggedIn, requireAccessControl } from \"../../authConfig\";\r\n\r\nimport styles from \"./QuestionInput.module.css\";\r\n\r\ninterface Props {\r\n    onSend: (question: string) => void;\r\n    disabled: boolean;\r\n    initQuestion?: string;\r\n    placeholder?: string;\r\n    clearOnSend?: boolean;\r\n}\r\n\r\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend, initQuestion }: Props) => {\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n\r\n    useEffect(() => {\r\n        initQuestion && setQuestion(initQuestion);\r\n    }, [initQuestion]);\r\n\r\n    const sendQuestion = () => {\r\n        if (disabled || !question.trim()) {\r\n            return;\r\n        }\r\n\r\n        onSend(question);\r\n\r\n        if (clearOnSend) {\r\n            setQuestion(\"\");\r\n        }\r\n    };\r\n\r\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\r\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\r\n            ev.preventDefault();\r\n            sendQuestion();\r\n        }\r\n    };\r\n\r\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setQuestion(\"\");\r\n        } else if (newValue.length <= 1000) {\r\n            setQuestion(newValue);\r\n        }\r\n    };\r\n\r\n    const { instance } = useMsal();\r\n    const disableRequiredAccessControl = requireAccessControl && !isLoggedIn(instance);\r\n    const sendQuestionDisabled = disabled || !question.trim() || disableRequiredAccessControl;\r\n\r\n    if (disableRequiredAccessControl) {\r\n        placeholder = \"Please login to continue...\";\r\n    }\r\n\r\n    return (\r\n        <Stack horizontal className={styles.questionInputContainer}>\r\n            <TextField\r\n                className={styles.questionInputTextArea}\r\n                disabled={disableRequiredAccessControl}\r\n                placeholder={placeholder}\r\n                multiline\r\n                resizable={false}\r\n                borderless\r\n                value={question}\r\n                onChange={onQuestionChange}\r\n                onKeyDown={onEnterPress}\r\n            />\r\n            <div className={styles.questionInputButtonsContainer}>\r\n                <Tooltip content=\"Ask question button\" relationship=\"label\">\r\n                    <Button size=\"large\" icon={<Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} disabled={sendQuestionDisabled} onClick={sendQuestion} />\r\n                </Tooltip>\r\n            </div>\r\n        </Stack>\r\n    );\r\n};\r\n","import styles from \"./Example.module.css\";\r\n\r\ninterface Props {\r\n    text: string;\r\n    value: string;\r\n    onClick: (value: string) => void;\r\n}\r\n\r\nexport const Example = ({ text, value, onClick }: Props) => {\r\n    return (\r\n        <div className={styles.example} onClick={() => onClick(value)}>\r\n            <p className={styles.exampleText}>{text}</p>\r\n        </div>\r\n    );\r\n};\r\n","import { Example } from \"./Example\";\r\n\r\nimport styles from \"./Example.module.css\";\r\n\r\nconst DEFAULT_EXAMPLES: string[] = [\r\n    \"What is included in my Northwind Health Plus plan that is not in standard?\",\r\n    \"What happens in a performance review?\",\r\n    \"What does a Product Manager do?\"\r\n];\r\n\r\nconst GPT4V_EXAMPLES: string[] = [\r\n    \"Compare the impact of interest rates and GDP in financial markets.\",\r\n    \"What is the expected trend for the S&P 500 index over the next five years? Compare it to the past S&P 500 performance\",\r\n    \"Can you identify any correlation between oil prices and stock market trends?\"\r\n];\r\n\r\ninterface Props {\r\n    onExampleClicked: (value: string) => void;\r\n    useGPT4V?: boolean;\r\n}\r\n\r\nexport const ExampleList = ({ onExampleClicked, useGPT4V }: Props) => {\r\n    return (\r\n        <ul className={styles.examplesNavList}>\r\n            {(useGPT4V ? GPT4V_EXAMPLES : DEFAULT_EXAMPLES).map((question, i) => (\r\n                <li key={i}>\r\n                    <Example text={question} value={question} onClick={onExampleClicked} />\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n","import styles from \"./UserChatMessage.module.css\";\r\n\r\ninterface Props {\r\n    message: string;\r\n}\r\n\r\nexport const UserChatMessage = ({ message }: Props) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.message}>{message}</div>\r\n        </div>\r\n    );\r\n};\r\n","import DOMPurify from \"dompurify\";\r\n\r\ntype ParsedSupportingContentItem = {\r\n    title: string;\r\n    content: string;\r\n};\r\n\r\nexport function parseSupportingContentItem(item: string): ParsedSupportingContentItem {\r\n    // Assumes the item starts with the file name followed by : and the content.\r\n    // Example: \"sdp_corporate.pdf: this is the content that follows\".\r\n    const parts = item.split(\": \");\r\n    const title = parts[0];\r\n    const content = DOMPurify.sanitize(parts.slice(1).join(\": \"));\r\n\r\n    return {\r\n        title,\r\n        content\r\n    };\r\n}\r\n","import { parseSupportingContentItem } from \"./SupportingContentParser\";\r\n\r\nimport styles from \"./SupportingContent.module.css\";\r\n\r\ninterface Props {\r\n    supportingContent: string[] | { text: string[]; images?: { url: string }[] };\r\n}\r\n\r\nexport const SupportingContent = ({ supportingContent }: Props) => {\r\n    const textItems = Array.isArray(supportingContent) ? supportingContent : supportingContent.text;\r\n    const imageItems = !Array.isArray(supportingContent) ? supportingContent?.images : [];\r\n    return (\r\n        <ul className={styles.supportingContentNavList}>\r\n            {textItems.map((c, ind) => {\r\n                const parsed = parseSupportingContentItem(c);\r\n                return (\r\n                    <li className={styles.supportingContentItem} key={ind}>\r\n                        <h4 className={styles.supportingContentItemHeader}>{parsed.title}</h4>\r\n                        <p className={styles.supportingContentItemText} dangerouslySetInnerHTML={{ __html: parsed.content }} />\r\n                    </li>\r\n                );\r\n            })}\r\n            {imageItems?.map((img, ind) => {\r\n                return <img className={styles.supportingContentItemImage} src={img.url} key={ind} />;\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n","export enum AnalysisPanelTabs {\r\n    ThoughtProcessTab = \"thoughtProcess\",\r\n    SupportingContentTab = \"supportingContent\",\r\n    CitationTab = \"citation\"\r\n}\r\n","import { Stack } from \"@fluentui/react\";\r\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\r\n\r\nimport styles from \"./AnalysisPanel.module.css\";\r\n\r\nimport { Thoughts } from \"../../api\";\r\n\r\ninterface Props {\r\n    thoughts: Thoughts[];\r\n}\r\n\r\nexport const ThoughtProcess = ({ thoughts }: Props) => {\r\n    return (\r\n        <ul className={styles.tList}>\r\n            {thoughts.map((t, ind) => {\r\n                return (\r\n                    <li className={styles.tListItem} key={ind}>\r\n                        <div className={styles.tStep}>{t.title}</div>\r\n                        {Array.isArray(t.description) ? (\r\n                            <SyntaxHighlighter language=\"json\" wrapLongLines className={styles.tCodeBlock}>\r\n                                {JSON.stringify(t.description, null, 2)}\r\n                            </SyntaxHighlighter>\r\n                        ) : (\r\n                            <>\r\n                                <div>{t.description}</div>\r\n                                <Stack horizontal tokens={{ childrenGap: 5 }}>\r\n                                    {t.props &&\r\n                                        (Object.keys(t.props) || []).map((k: any) => (\r\n                                            <span className={styles.tProp}>\r\n                                                {k}: {JSON.stringify(t.props?.[k])}\r\n                                            </span>\r\n                                        ))}\r\n                                </Stack>\r\n                            </>\r\n                        )}\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n","import { Stack, Pivot, PivotItem } from \"@fluentui/react\";\r\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\r\n\r\nimport styles from \"./AnalysisPanel.module.css\";\r\n\r\nimport { SupportingContent } from \"../SupportingContent\";\r\nimport { ChatAppResponse } from \"../../api\";\r\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\r\nimport { ThoughtProcess } from \"./ThoughtProcess\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { getHeaders } from \"../../api\";\r\nimport { useLogin, getToken } from \"../../authConfig\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\ninterface Props {\r\n    className: string;\r\n    activeTab: AnalysisPanelTabs;\r\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\r\n    activeCitation: string | undefined;\r\n    citationHeight: string;\r\n    answer: ChatAppResponse;\r\n}\r\n\r\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\r\n\r\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\r\n    const isDisabledThoughtProcessTab: boolean = !answer.choices[0].context.thoughts;\r\n    const isDisabledSupportingContentTab: boolean = !answer.choices[0].context.data_points;\r\n    const isDisabledCitationTab: boolean = !activeCitation;\r\n    const [citation, setCitation] = useState(\"\");\r\n\r\n    const client = useLogin ? useMsal().instance : undefined;\r\n\r\n    const fetchCitation = async () => {\r\n        const token = client ? await getToken(client) : undefined;\r\n        if (activeCitation) {\r\n            // Get hash from the URL as it may contain #page=N\r\n            // which helps browser PDF renderer jump to correct page N\r\n            const originalHash = activeCitation.indexOf(\"#\") ? activeCitation.split(\"#\")[1] : \"\";\r\n            const response = await fetch(activeCitation, {\r\n                method: \"GET\",\r\n                headers: getHeaders(token)\r\n            });\r\n            const citationContent = await response.blob();\r\n            let citationObjectUrl = URL.createObjectURL(citationContent);\r\n            // Add hash back to the new blob URL\r\n            if (originalHash) {\r\n                citationObjectUrl += \"#\" + originalHash;\r\n            }\r\n            setCitation(citationObjectUrl);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        fetchCitation();\r\n    }, []);\r\n\r\n    return (\r\n        <Pivot\r\n            className={className}\r\n            selectedKey={activeTab}\r\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\r\n        >\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\r\n                headerText=\"Thought process\"\r\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                <ThoughtProcess thoughts={answer.choices[0].context.thoughts || []} />\r\n            </PivotItem>\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.SupportingContentTab}\r\n                headerText=\"Supporting content\"\r\n                headerButtonProps={isDisabledSupportingContentTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                <SupportingContent supportingContent={answer.choices[0].context.data_points} />\r\n            </PivotItem>\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.CitationTab}\r\n                headerText=\"Citation\"\r\n                headerButtonProps={isDisabledCitationTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                {activeCitation?.endsWith(\".png\") ? (\r\n                    <img src={citation} className={styles.citationImg} />\r\n                ) : (\r\n                    <iframe title=\"Citation\" src={citation} width=\"100%\" height={citationHeight} />\r\n                )}\r\n            </PivotItem>\r\n        </Pivot>\r\n    );\r\n};\r\n","import { Settings24Regular } from \"@fluentui/react-icons\";\r\nimport { Button } from \"@fluentui/react-components\";\r\n\r\nimport styles from \"./SettingsButton.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n}\r\n\r\nexport const SettingsButton = ({ className, onClick }: Props) => {\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`}>\r\n            <Button icon={<Settings24Regular />} onClick={onClick}>\r\n                {\"Developer settings\"}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n","import { Delete24Regular } from \"@fluentui/react-icons\";\r\nimport { Button } from \"@fluentui/react-components\";\r\n\r\nimport styles from \"./ClearChatButton.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`}>\r\n            <Button icon={<Delete24Regular />} disabled={disabled} onClick={onClick}>\r\n                {\"Clear chat\"}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { ChoiceGroup, IChoiceGroupOption, Stack, IDropdownOption, Dropdown } from \"@fluentui/react\";\r\n\r\nimport styles from \"./VectorSettings.module.css\";\r\nimport { RetrievalMode, VectorFieldOptions } from \"../../api\";\r\n\r\ninterface Props {\r\n    showImageOptions?: boolean;\r\n    updateRetrievalMode: (retrievalMode: RetrievalMode) => void;\r\n    updateVectorFields: (options: VectorFieldOptions[]) => void;\r\n}\r\n\r\nconst vectorFields: IChoiceGroupOption[] = [\r\n    {\r\n        key: VectorFieldOptions.Embedding,\r\n        text: \"Text Embeddings\"\r\n    },\r\n    {\r\n        key: VectorFieldOptions.ImageEmbedding,\r\n        text: \"Image Embeddings\"\r\n    },\r\n    {\r\n        key: VectorFieldOptions.Both,\r\n        text: \"Text and Image embeddings\"\r\n    }\r\n];\r\n\r\nexport const VectorSettings = ({ updateRetrievalMode, updateVectorFields, showImageOptions }: Props) => {\r\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\r\n    const [vectorFieldOption, setVectorFieldOption] = useState<string>();\r\n\r\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined) => {\r\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\r\n        updateRetrievalMode(option?.data || RetrievalMode.Hybrid);\r\n    };\r\n\r\n    const onVectorFieldsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IChoiceGroupOption) => {\r\n        option && setVectorFieldOption(option.key);\r\n        let list;\r\n        if (option?.key === \"both\") {\r\n            list = [VectorFieldOptions.Embedding, VectorFieldOptions.ImageEmbedding];\r\n        } else {\r\n            list = [option?.key as VectorFieldOptions];\r\n        }\r\n        updateVectorFields(list);\r\n    };\r\n\r\n    useEffect(() => {\r\n        showImageOptions\r\n            ? updateVectorFields([VectorFieldOptions.Embedding, VectorFieldOptions.ImageEmbedding])\r\n            : updateVectorFields([VectorFieldOptions.Embedding]);\r\n    }, [showImageOptions]);\r\n\r\n    return (\r\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\r\n            <Dropdown\r\n                label=\"Retrieval mode\"\r\n                options={[\r\n                    { key: \"hybrid\", text: \"Vectors + Text (Hybrid)\", selected: retrievalMode == RetrievalMode.Hybrid, data: RetrievalMode.Hybrid },\r\n                    { key: \"vectors\", text: \"Vectors\", selected: retrievalMode == RetrievalMode.Vectors, data: RetrievalMode.Vectors },\r\n                    { key: \"text\", text: \"Text\", selected: retrievalMode == RetrievalMode.Text, data: RetrievalMode.Text }\r\n                ]}\r\n                required\r\n                onChange={onRetrievalModeChange}\r\n            />\r\n\r\n            {showImageOptions && [RetrievalMode.Vectors, RetrievalMode.Hybrid].includes(retrievalMode) && (\r\n                <ChoiceGroup\r\n                    options={vectorFields}\r\n                    onChange={onVectorFieldsChange}\r\n                    selectedKey={vectorFieldOption}\r\n                    defaultSelectedKey={VectorFieldOptions.Both}\r\n                    label=\"Vector Fields (Multi-query vector search)\"\r\n                />\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { Label } from \"@fluentui/react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport {\r\n    DataGridBody,\r\n    DataGridRow,\r\n    DataGrid,\r\n    DataGridHeader,\r\n    DataGridHeaderCell,\r\n    DataGridCell,\r\n    createTableColumn,\r\n    TableColumnDefinition\r\n} from \"@fluentui/react-table\";\r\nimport { appServicesToken } from \"../../authConfig\";\r\n\r\ntype Claim = {\r\n    name: string;\r\n    value: string;\r\n};\r\n\r\nexport const TokenClaimsDisplay = () => {\r\n    const { instance } = useMsal();\r\n    const activeAccount = instance.getActiveAccount();\r\n\r\n    const ToString = (a: string | any) => {\r\n        if (typeof a === \"string\") {\r\n            return a;\r\n        } else {\r\n            return JSON.stringify(a);\r\n        }\r\n    };\r\n\r\n    let createClaims = (o: Record<string, unknown> | undefined) => {\r\n        return Object.keys(o ?? {}).map((key: string) => {\r\n            let originalKey = key;\r\n            try {\r\n                // Some claim names may be a URL to a full schema, just use the last part of the URL in this case\r\n                const url = new URL(key);\r\n                const parts = url.pathname.split(\"/\");\r\n                key = parts[parts.length - 1];\r\n            } catch (error) {\r\n                // Do not parse key if it's not a URL\r\n            }\r\n            return { name: key, value: ToString((o ?? {})[originalKey]) };\r\n        });\r\n    };\r\n    const items: Claim[] = createClaims(activeAccount?.idTokenClaims ?? appServicesToken?.user_claims);\r\n\r\n    const columns: TableColumnDefinition<Claim>[] = [\r\n        createTableColumn<Claim>({\r\n            columnId: \"name\",\r\n            compare: (a: Claim, b: Claim) => {\r\n                return a.name.localeCompare(b.name);\r\n            },\r\n            renderHeaderCell: () => {\r\n                return \"Name\";\r\n            },\r\n            renderCell: item => {\r\n                return item.name;\r\n            }\r\n        }),\r\n        createTableColumn<Claim>({\r\n            columnId: \"value\",\r\n            compare: (a: Claim, b: Claim) => {\r\n                return a.value.localeCompare(b.value);\r\n            },\r\n            renderHeaderCell: () => {\r\n                return \"Value\";\r\n            },\r\n            renderCell: item => {\r\n                return item.value;\r\n            }\r\n        })\r\n    ];\r\n\r\n    return (\r\n        <div>\r\n            <Label>ID Token Claims</Label>\r\n            <DataGrid items={items} columns={columns} sortable getRowId={item => item.name}>\r\n                <DataGridHeader>\r\n                    <DataGridRow>{({ renderHeaderCell }) => <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>}</DataGridRow>\r\n                </DataGridHeader>\r\n                <DataGridBody<Claim>>\r\n                    {({ item, rowId }) => <DataGridRow<Claim> key={rowId}>{({ renderCell }) => <DataGridCell>{renderCell(item)}</DataGridCell>}</DataGridRow>}\r\n                </DataGridBody>\r\n            </DataGrid>\r\n        </div>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { Stack, Checkbox, IDropdownOption, Dropdown } from \"@fluentui/react\";\r\n\r\nimport styles from \"./GPT4VSettings.module.css\";\r\nimport { GPT4VInput } from \"../../api\";\r\n\r\ninterface Props {\r\n    gpt4vInputs: GPT4VInput;\r\n    isUseGPT4V: boolean;\r\n    updateGPT4VInputs: (input: GPT4VInput) => void;\r\n    updateUseGPT4V: (useGPT4V: boolean) => void;\r\n}\r\n\r\nexport const GPT4VSettings = ({ updateGPT4VInputs, updateUseGPT4V, isUseGPT4V, gpt4vInputs }: Props) => {\r\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(isUseGPT4V);\r\n    const [vectorFieldOption, setVectorFieldOption] = useState<GPT4VInput>(gpt4vInputs || GPT4VInput.TextAndImages);\r\n\r\n    const onuseGPT4V = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        updateUseGPT4V(!!checked);\r\n        setUseGPT4V(!!checked);\r\n    };\r\n\r\n    const onSetGPT4VInput = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<GPT4VInput> | undefined) => {\r\n        if (option) {\r\n            const data = option.key as GPT4VInput;\r\n            updateGPT4VInputs(data || GPT4VInput.TextAndImages);\r\n            data && setVectorFieldOption(data);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        useGPT4V && updateGPT4VInputs(GPT4VInput.TextAndImages);\r\n    }, [useGPT4V]);\r\n\r\n    return (\r\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\r\n            <Checkbox checked={useGPT4V} label=\"Use GPT-4 Turbo with Vision\" onChange={onuseGPT4V} />\r\n            {useGPT4V && (\r\n                <Dropdown\r\n                    selectedKey={vectorFieldOption}\r\n                    label=\"GPT-4 Turbo with Vision Inputs\"\r\n                    options={[\r\n                        {\r\n                            key: GPT4VInput.TextAndImages,\r\n                            text: \"Images and text from index\"\r\n                        },\r\n                        { text: \"Images only\", key: GPT4VInput.Images },\r\n                        { text: \"Text only\", key: GPT4VInput.Texts }\r\n                    ]}\r\n                    required\r\n                    onChange={onSetGPT4VInput}\r\n                />\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { useRef, useState, useEffect } from \"react\";\r\nimport { Checkbox, Panel, DefaultButton, TextField, SpinButton, Slider } from \"@fluentui/react\";\r\nimport { SparkleFilled } from \"@fluentui/react-icons\";\r\nimport readNDJSONStream from \"ndjson-readablestream\";\r\n\r\nimport styles from \"./Chat.module.css\";\r\n\r\nimport {\r\n    chatApi,\r\n    configApi,\r\n    RetrievalMode,\r\n    ChatAppResponse,\r\n    ChatAppResponseOrError,\r\n    ChatAppRequest,\r\n    ResponseMessage,\r\n    VectorFieldOptions,\r\n    GPT4VInput\r\n} from \"../../api\";\r\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { ExampleList } from \"../../components/Example\";\r\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\r\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\r\nimport { SettingsButton } from \"../../components/SettingsButton\";\r\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\r\nimport { useLogin, getToken, isLoggedIn, requireAccessControl } from \"../../authConfig\";\r\nimport { VectorSettings } from \"../../components/VectorSettings\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\r\nimport { GPT4VSettings } from \"../../components/GPT4VSettings\";\r\n\r\nconst Chat = () => {\r\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\r\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\r\n    const [temperature, setTemperature] = useState<number>(0.3);\r\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\r\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\r\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\r\n    const [shouldStream, setShouldStream] = useState<boolean>(true);\r\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\r\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\r\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(false);\r\n    const [vectorFieldList, setVectorFieldList] = useState<VectorFieldOptions[]>([VectorFieldOptions.Embedding]);\r\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\r\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\r\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\r\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [isStreaming, setIsStreaming] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n\r\n    const [activeCitation, setActiveCitation] = useState<string>();\r\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\r\n\r\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\r\n    const [answers, setAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\r\n    const [streamedAnswers, setStreamedAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\r\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\r\n    const [showSemanticRankerOption, setShowSemanticRankerOption] = useState<boolean>(false);\r\n    const [showVectorOption, setShowVectorOption] = useState<boolean>(false);\r\n\r\n    const getConfig = async () => {\r\n        const token = client ? await getToken(client) : undefined;\r\n\r\n        configApi(token).then(config => {\r\n            setShowGPT4VOptions(config.showGPT4VOptions);\r\n            setUseSemanticRanker(config.showSemanticRankerOption);\r\n            setShowSemanticRankerOption(config.showSemanticRankerOption);\r\n            setShowVectorOption(config.showVectorOption);\r\n            if (!config.showVectorOption) {\r\n                setRetrievalMode(RetrievalMode.Text);\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleAsyncRequest = async (question: string, answers: [string, ChatAppResponse][], setAnswers: Function, responseBody: ReadableStream<any>) => {\r\n        let answer: string = \"\";\r\n        let askResponse: ChatAppResponse = {} as ChatAppResponse;\r\n\r\n        const updateState = (newContent: string) => {\r\n            return new Promise(resolve => {\r\n                setTimeout(() => {\r\n                    answer += newContent;\r\n                    const latestResponse: ChatAppResponse = {\r\n                        ...askResponse,\r\n                        choices: [{ ...askResponse.choices[0], message: { content: answer, role: askResponse.choices[0].message.role } }]\r\n                    };\r\n                    setStreamedAnswers([...answers, [question, latestResponse]]);\r\n                    resolve(null);\r\n                }, 33);\r\n            });\r\n        };\r\n        try {\r\n            setIsStreaming(true);\r\n            for await (const event of readNDJSONStream(responseBody)) {\r\n                if (event[\"choices\"] && event[\"choices\"][0][\"context\"] && event[\"choices\"][0][\"context\"][\"data_points\"]) {\r\n                    event[\"choices\"][0][\"message\"] = event[\"choices\"][0][\"delta\"];\r\n                    askResponse = event as ChatAppResponse;\r\n                } else if (event[\"choices\"] && event[\"choices\"][0][\"delta\"][\"content\"]) {\r\n                    setIsLoading(false);\r\n                    await updateState(event[\"choices\"][0][\"delta\"][\"content\"]);\r\n                } else if (event[\"choices\"] && event[\"choices\"][0][\"context\"]) {\r\n                    // Update context with new keys from latest event\r\n                    askResponse.choices[0].context = { ...askResponse.choices[0].context, ...event[\"choices\"][0][\"context\"] };\r\n                } else if (event[\"error\"]) {\r\n                    throw Error(event[\"error\"]);\r\n                }\r\n            }\r\n        } finally {\r\n            setIsStreaming(false);\r\n        }\r\n        const fullResponse: ChatAppResponse = {\r\n            ...askResponse,\r\n            choices: [{ ...askResponse.choices[0], message: { content: answer, role: askResponse.choices[0].message.role } }]\r\n        };\r\n        return fullResponse;\r\n    };\r\n\r\n    const client = useLogin ? useMsal().instance : undefined;\r\n\r\n    const makeApiRequest = async (question: string) => {\r\n        lastQuestionRef.current = question;\r\n\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n\r\n        const token = client ? await getToken(client) : undefined;\r\n\r\n        try {\r\n            const messages: ResponseMessage[] = answers.flatMap(a => [\r\n                { content: a[0], role: \"user\" },\r\n                { content: a[1].choices[0].message.content, role: \"assistant\" }\r\n            ]);\r\n\r\n            const request: ChatAppRequest = {\r\n                messages: [...messages, { content: question, role: \"user\" }],\r\n                stream: shouldStream,\r\n                context: {\r\n                    overrides: {\r\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\r\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\r\n                        top: retrieveCount,\r\n                        temperature: temperature,\r\n                        retrieval_mode: retrievalMode,\r\n                        semantic_ranker: useSemanticRanker,\r\n                        semantic_captions: useSemanticCaptions,\r\n                        suggest_followup_questions: useSuggestFollowupQuestions,\r\n                        use_oid_security_filter: useOidSecurityFilter,\r\n                        use_groups_security_filter: useGroupsSecurityFilter,\r\n                        vector_fields: vectorFieldList,\r\n                        use_gpt4v: useGPT4V,\r\n                        gpt4v_input: gpt4vInput\r\n                    }\r\n                },\r\n                // ChatAppProtocol: Client must pass on any session state received from the server\r\n                session_state: answers.length ? answers[answers.length - 1][1].choices[0].session_state : null\r\n            };\r\n\r\n            const response = await chatApi(request, token);\r\n            if (!response.body) {\r\n                throw Error(\"No response body\");\r\n            }\r\n            if (shouldStream) {\r\n                const parsedResponse: ChatAppResponse = await handleAsyncRequest(question, answers, setAnswers, response.body);\r\n                setAnswers([...answers, [question, parsedResponse]]);\r\n            } else {\r\n                const parsedResponse: ChatAppResponseOrError = await response.json();\r\n                if (response.status > 299 || !response.ok) {\r\n                    throw Error(parsedResponse.error || \"Unknown error\");\r\n                }\r\n                setAnswers([...answers, [question, parsedResponse as ChatAppResponse]]);\r\n            }\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const clearChat = () => {\r\n        lastQuestionRef.current = \"\";\r\n        error && setError(undefined);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n        setAnswers([]);\r\n        setStreamedAnswers([]);\r\n        setIsLoading(false);\r\n        setIsStreaming(false);\r\n    };\r\n\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"auto\" }), [streamedAnswers]);\r\n    useEffect(() => {\r\n        getConfig();\r\n    }, []);\r\n\r\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplate(newValue || \"\");\r\n    };\r\n\r\n    const onTemperatureChange = (\r\n        newValue: number,\r\n        range?: [number, number],\r\n        event?: React.MouseEvent | React.TouchEvent | MouseEvent | TouchEvent | React.KeyboardEvent\r\n    ) => {\r\n        setTemperature(newValue);\r\n    };\r\n\r\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setRetrieveCount(parseInt(newValue || \"3\"));\r\n    };\r\n\r\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticRanker(!!checked);\r\n    };\r\n\r\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticCaptions(!!checked);\r\n    };\r\n\r\n    const onShouldStreamChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setShouldStream(!!checked);\r\n    };\r\n\r\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\r\n        setExcludeCategory(newValue || \"\");\r\n    };\r\n\r\n    const onUseSuggestFollowupQuestionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSuggestFollowupQuestions(!!checked);\r\n    };\r\n\r\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseOidSecurityFilter(!!checked);\r\n    };\r\n\r\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseGroupsSecurityFilter(!!checked);\r\n    };\r\n\r\n    const onExampleClicked = (example: string) => {\r\n        makeApiRequest(example);\r\n    };\r\n\r\n    const onShowCitation = (citation: string, index: number) => {\r\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveCitation(citation);\r\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\r\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveAnalysisPanelTab(tab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.commandsContainer}>\r\n                <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\r\n                <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\r\n            </div>\r\n            <div className={styles.chatRoot}>\r\n                <div className={styles.chatContainer}>\r\n                    {!lastQuestionRef.current ? (\r\n                        <div className={styles.chatEmptyState}>\r\n                            <SparkleFilled fontSize={\"120px\"} primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Chat logo\" />\r\n                            <h1 className={styles.chatEmptyStateTitle}>Chat with your data</h1>\r\n                            <h2 className={styles.chatEmptyStateSubtitle}>Ask anything or try an example</h2>\r\n                            <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} />\r\n                        </div>\r\n                    ) : (\r\n                        <div className={styles.chatMessageStream}>\r\n                            {isStreaming &&\r\n                                streamedAnswers.map((streamedAnswer, index) => (\r\n                                    <div key={index}>\r\n                                        <UserChatMessage message={streamedAnswer[0]} />\r\n                                        <div className={styles.chatMessageGpt}>\r\n                                            <Answer\r\n                                                isStreaming={true}\r\n                                                key={index}\r\n                                                answer={streamedAnswer[1]}\r\n                                                isSelected={false}\r\n                                                onCitationClicked={c => onShowCitation(c, index)}\r\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\r\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\r\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\r\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            {!isStreaming &&\r\n                                answers.map((answer, index) => (\r\n                                    <div key={index}>\r\n                                        <UserChatMessage message={answer[0]} />\r\n                                        <div className={styles.chatMessageGpt}>\r\n                                            <Answer\r\n                                                isStreaming={false}\r\n                                                key={index}\r\n                                                answer={answer[1]}\r\n                                                isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\r\n                                                onCitationClicked={c => onShowCitation(c, index)}\r\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\r\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\r\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\r\n                                                showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            {isLoading && (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerLoading />\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                            {error ? (\r\n                                <>\r\n                                    <UserChatMessage message={lastQuestionRef.current} />\r\n                                    <div className={styles.chatMessageGptMinWidth}>\r\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\r\n                                    </div>\r\n                                </>\r\n                            ) : null}\r\n                            <div ref={chatMessageStreamEnd} />\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className={styles.chatInput}>\r\n                        <QuestionInput\r\n                            clearOnSend\r\n                            placeholder=\"Type a new question (e.g. does my plan cover annual eye exams?)\"\r\n                            disabled={isLoading}\r\n                            onSend={question => makeApiRequest(question)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {answers.length > 0 && activeAnalysisPanelTab && (\r\n                    <AnalysisPanel\r\n                        className={styles.chatAnalysisPanel}\r\n                        activeCitation={activeCitation}\r\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\r\n                        citationHeight=\"810px\"\r\n                        answer={answers[selectedAnswer][1]}\r\n                        activeTab={activeAnalysisPanelTab}\r\n                    />\r\n                )}\r\n\r\n                <Panel\r\n                    headerText=\"Configure answer generation\"\r\n                    isOpen={isConfigPanelOpen}\r\n                    isBlocking={false}\r\n                    onDismiss={() => setIsConfigPanelOpen(false)}\r\n                    closeButtonAriaLabel=\"Close\"\r\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\r\n                    isFooterAtBottom={true}\r\n                >\r\n                    <TextField\r\n                        className={styles.chatSettingsSeparator}\r\n                        defaultValue={promptTemplate}\r\n                        label=\"Override prompt template\"\r\n                        multiline\r\n                        autoAdjustHeight\r\n                        onChange={onPromptTemplateChange}\r\n                    />\r\n\r\n                    <Slider\r\n                        className={styles.chatSettingsSeparator}\r\n                        label=\"Temperature\"\r\n                        min={0}\r\n                        max={1}\r\n                        step={0.1}\r\n                        defaultValue={temperature}\r\n                        onChange={onTemperatureChange}\r\n                        showValue\r\n                        snapToStep\r\n                    />\r\n\r\n                    <SpinButton\r\n                        className={styles.chatSettingsSeparator}\r\n                        label=\"Retrieve this many search results:\"\r\n                        min={1}\r\n                        max={50}\r\n                        defaultValue={retrieveCount.toString()}\r\n                        onChange={onRetrieveCountChange}\r\n                    />\r\n                    <TextField className={styles.chatSettingsSeparator} label=\"Exclude category\" onChange={onExcludeCategoryChanged} />\r\n\r\n                    {showSemanticRankerOption && (\r\n                        <Checkbox\r\n                            className={styles.chatSettingsSeparator}\r\n                            checked={useSemanticRanker}\r\n                            label=\"Use semantic ranker for retrieval\"\r\n                            onChange={onUseSemanticRankerChange}\r\n                        />\r\n                    )}\r\n                    <Checkbox\r\n                        className={styles.chatSettingsSeparator}\r\n                        checked={useSemanticCaptions}\r\n                        label=\"Use query-contextual summaries instead of whole documents\"\r\n                        onChange={onUseSemanticCaptionsChange}\r\n                        disabled={!useSemanticRanker}\r\n                    />\r\n                    <Checkbox\r\n                        className={styles.chatSettingsSeparator}\r\n                        checked={useSuggestFollowupQuestions}\r\n                        label=\"Suggest follow-up questions\"\r\n                        onChange={onUseSuggestFollowupQuestionsChange}\r\n                    />\r\n\r\n                    {showGPT4VOptions && (\r\n                        <GPT4VSettings\r\n                            gpt4vInputs={gpt4vInput}\r\n                            isUseGPT4V={useGPT4V}\r\n                            updateUseGPT4V={useGPT4V => {\r\n                                setUseGPT4V(useGPT4V);\r\n                            }}\r\n                            updateGPT4VInputs={inputs => setGPT4VInput(inputs)}\r\n                        />\r\n                    )}\r\n\r\n                    {showVectorOption && (\r\n                        <VectorSettings\r\n                            showImageOptions={useGPT4V && showGPT4VOptions}\r\n                            updateVectorFields={(options: VectorFieldOptions[]) => setVectorFieldList(options)}\r\n                            updateRetrievalMode={(retrievalMode: RetrievalMode) => setRetrievalMode(retrievalMode)}\r\n                        />\r\n                    )}\r\n\r\n                    {useLogin && (\r\n                        <Checkbox\r\n                            className={styles.chatSettingsSeparator}\r\n                            checked={useOidSecurityFilter || requireAccessControl}\r\n                            label=\"Use oid security filter\"\r\n                            disabled={!isLoggedIn(client) || requireAccessControl}\r\n                            onChange={onUseOidSecurityFilterChange}\r\n                        />\r\n                    )}\r\n                    {useLogin && (\r\n                        <Checkbox\r\n                            className={styles.chatSettingsSeparator}\r\n                            checked={useGroupsSecurityFilter || requireAccessControl}\r\n                            label=\"Use groups security filter\"\r\n                            disabled={!isLoggedIn(client) || requireAccessControl}\r\n                            onChange={onUseGroupsSecurityFilterChange}\r\n                        />\r\n                    )}\r\n\r\n                    <Checkbox\r\n                        className={styles.chatSettingsSeparator}\r\n                        checked={shouldStream}\r\n                        label=\"Stream chat completion responses\"\r\n                        onChange={onShouldStreamChange}\r\n                    />\r\n                    {useLogin && <TokenClaimsDisplay />}\r\n                </Panel>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chat;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\r\nimport { initializeIcons } from \"@fluentui/react\";\r\nimport { MsalProvider } from \"@azure/msal-react\";\r\nimport { PublicClientApplication, EventType, AccountInfo } from \"@azure/msal-browser\";\r\nimport { msalConfig, useLogin } from \"./authConfig\";\r\n\r\nimport \"./index.css\";\r\n\r\nimport Layout from \"./pages/layout/Layout\";\r\nimport Chat from \"./pages/chat/Chat\";\r\n\r\nvar layout;\r\nif (useLogin) {\r\n    var msalInstance = new PublicClientApplication(msalConfig);\r\n\r\n    // Default to using the first account if no account is active on page load\r\n    if (!msalInstance.getActiveAccount() && msalInstance.getAllAccounts().length > 0) {\r\n        // Account selection logic is app dependent. Adjust as needed for different use cases.\r\n        msalInstance.setActiveAccount(msalInstance.getActiveAccount());\r\n    }\r\n\r\n    // Listen for sign-in event and set active account\r\n    msalInstance.addEventCallback(event => {\r\n        if (event.eventType === EventType.LOGIN_SUCCESS && event.payload) {\r\n            const account = event.payload as AccountInfo;\r\n            msalInstance.setActiveAccount(account);\r\n        }\r\n    });\r\n\r\n    layout = (\r\n        <MsalProvider instance={msalInstance}>\r\n            <Layout />\r\n        </MsalProvider>\r\n    );\r\n} else {\r\n    layout = <Layout />;\r\n}\r\n\r\ninitializeIcons();\r\n\r\nconst router = createHashRouter([\r\n    {\r\n        path: \"/\",\r\n        element: layout,\r\n        children: [\r\n            {\r\n                index: true,\r\n                element: <Chat />\r\n            },\r\n            {\r\n                path: \"qa\",\r\n                lazy: () => import(\"./pages/ask/Ask\")\r\n            },\r\n            {\r\n                path: \"*\",\r\n                lazy: () => import(\"./pages/NoPage\")\r\n            }\r\n        ]\r\n    }\r\n]);\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\r\n    <React.StrictMode>\r\n        <RouterProvider router={router} />\r\n    </React.StrictMode>\r\n);\r\n"],"file":"assets/index-21dc70bb.js"}