{"version":3,"file":"Ask-1f321492.js","sources":["../../../frontend/src/pages/ask/Ask.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport { Checkbox, Panel, DefaultButton, Spinner, Slider, TextField, SpinButton, IDropdownOption, Dropdown } from \"@fluentui/react\";\r\n\r\nimport styles from \"./Ask.module.css\";\r\n\r\nimport { askApi, configApi, ChatAppResponse, ChatAppRequest, RetrievalMode, VectorFieldOptions, GPT4VInput } from \"../../api\";\r\nimport { Answer, AnswerError } from \"../../components/Answer\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { ExampleList } from \"../../components/Example\";\r\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\r\nimport { SettingsButton } from \"../../components/SettingsButton/SettingsButton\";\r\nimport { useLogin, getToken, isLoggedIn, requireAccessControl } from \"../../authConfig\";\r\nimport { VectorSettings } from \"../../components/VectorSettings\";\r\nimport { GPT4VSettings } from \"../../components/GPT4VSettings\";\r\n\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\r\n\r\nexport function Component(): JSX.Element {\r\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\r\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\r\n    const [promptTemplatePrefix, setPromptTemplatePrefix] = useState<string>(\"\");\r\n    const [promptTemplateSuffix, setPromptTemplateSuffix] = useState<string>(\"\");\r\n    const [temperature, setTemperature] = useState<number>(0.3);\r\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\r\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\r\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\r\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\r\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\r\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\r\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n    const [vectorFieldList, setVectorFieldList] = useState<VectorFieldOptions[]>([VectorFieldOptions.Embedding, VectorFieldOptions.ImageEmbedding]);\r\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\r\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\r\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\r\n    const [showSemanticRankerOption, setShowSemanticRankerOption] = useState<boolean>(false);\r\n    const [showVectorOption, setShowVectorOption] = useState<boolean>(false);\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n    const [answer, setAnswer] = useState<ChatAppResponse>();\r\n\r\n    const [activeCitation, setActiveCitation] = useState<string>();\r\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\r\n\r\n    const client = useLogin ? useMsal().instance : undefined;\r\n\r\n    const getConfig = async () => {\r\n        const token = client ? await getToken(client) : undefined;\r\n\r\n        configApi(token).then(config => {\r\n            setShowGPT4VOptions(config.showGPT4VOptions);\r\n            setUseSemanticRanker(config.showSemanticRankerOption);\r\n            setShowSemanticRankerOption(config.showSemanticRankerOption);\r\n            setShowVectorOption(config.showVectorOption);\r\n            if (!config.showVectorOption) {\r\n                setRetrievalMode(RetrievalMode.Text);\r\n            }\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getConfig();\r\n    }, []);\r\n\r\n    const makeApiRequest = async (question: string) => {\r\n        lastQuestionRef.current = question;\r\n\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n\r\n        const token = client ? await getToken(client) : undefined;\r\n\r\n        try {\r\n            const request: ChatAppRequest = {\r\n                messages: [\r\n                    {\r\n                        content: question,\r\n                        role: \"user\"\r\n                    }\r\n                ],\r\n                context: {\r\n                    overrides: {\r\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\r\n                        prompt_template_prefix: promptTemplatePrefix.length === 0 ? undefined : promptTemplatePrefix,\r\n                        prompt_template_suffix: promptTemplateSuffix.length === 0 ? undefined : promptTemplateSuffix,\r\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\r\n                        top: retrieveCount,\r\n                        temperature: temperature,\r\n                        retrieval_mode: retrievalMode,\r\n                        semantic_ranker: useSemanticRanker,\r\n                        semantic_captions: useSemanticCaptions,\r\n                        use_oid_security_filter: useOidSecurityFilter,\r\n                        use_groups_security_filter: useGroupsSecurityFilter,\r\n                        vector_fields: vectorFieldList,\r\n                        use_gpt4v: useGPT4V,\r\n                        gpt4v_input: gpt4vInput\r\n                    }\r\n                },\r\n                // ChatAppProtocol: Client must pass on any session state received from the server\r\n                session_state: answer ? answer.choices[0].session_state : null\r\n            };\r\n            const result = await askApi(request, token);\r\n            setAnswer(result);\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplate(newValue || \"\");\r\n    };\r\n\r\n    const onPromptTemplatePrefixChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplatePrefix(newValue || \"\");\r\n    };\r\n\r\n    const onPromptTemplateSuffixChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplateSuffix(newValue || \"\");\r\n    };\r\n\r\n    const onTemperatureChange = (\r\n        newValue: number,\r\n        range?: [number, number],\r\n        event?: React.MouseEvent | React.TouchEvent | MouseEvent | TouchEvent | React.KeyboardEvent\r\n    ) => {\r\n        setTemperature(newValue);\r\n    };\r\n\r\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setRetrieveCount(parseInt(newValue || \"3\"));\r\n    };\r\n\r\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined, index?: number | undefined) => {\r\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\r\n    };\r\n\r\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticRanker(!!checked);\r\n    };\r\n\r\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticCaptions(!!checked);\r\n    };\r\n\r\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\r\n        setExcludeCategory(newValue || \"\");\r\n    };\r\n\r\n    const onExampleClicked = (example: string) => {\r\n        makeApiRequest(example);\r\n        setQuestion(example);\r\n    };\r\n\r\n    const onShowCitation = (citation: string) => {\r\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveCitation(citation);\r\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\r\n        }\r\n    };\r\n\r\n    const onToggleTab = (tab: AnalysisPanelTabs) => {\r\n        if (activeAnalysisPanelTab === tab) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveAnalysisPanelTab(tab);\r\n        }\r\n    };\r\n\r\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseOidSecurityFilter(!!checked);\r\n    };\r\n\r\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseGroupsSecurityFilter(!!checked);\r\n    };\r\n\r\n    return (\r\n        <div className={styles.askContainer}>\r\n            <div className={styles.askTopSection}>\r\n                <SettingsButton className={styles.settingsButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\r\n                <h1 className={styles.askTitle}>Ask your data</h1>\r\n                <div className={styles.askQuestionInput}>\r\n                    <QuestionInput\r\n                        placeholder=\"Example: Does my plan cover annual eye exams?\"\r\n                        disabled={isLoading}\r\n                        initQuestion={question}\r\n                        onSend={question => makeApiRequest(question)}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className={styles.askBottomSection}>\r\n                {isLoading && <Spinner label=\"Generating answer\" />}\r\n                {!lastQuestionRef.current && <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} />}\r\n                {!isLoading && answer && !error && (\r\n                    <div className={styles.askAnswerContainer}>\r\n                        <Answer\r\n                            answer={answer}\r\n                            isStreaming={false}\r\n                            onCitationClicked={x => onShowCitation(x)}\r\n                            onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab)}\r\n                            onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab)}\r\n                        />\r\n                    </div>\r\n                )}\r\n                {error ? (\r\n                    <div className={styles.askAnswerContainer}>\r\n                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\r\n                    </div>\r\n                ) : null}\r\n                {activeAnalysisPanelTab && answer && (\r\n                    <AnalysisPanel\r\n                        className={styles.askAnalysisPanel}\r\n                        activeCitation={activeCitation}\r\n                        onActiveTabChanged={x => onToggleTab(x)}\r\n                        citationHeight=\"600px\"\r\n                        answer={answer}\r\n                        activeTab={activeAnalysisPanelTab}\r\n                    />\r\n                )}\r\n            </div>\r\n\r\n            <Panel\r\n                headerText=\"Configure answer generation\"\r\n                isOpen={isConfigPanelOpen}\r\n                isBlocking={false}\r\n                onDismiss={() => setIsConfigPanelOpen(false)}\r\n                closeButtonAriaLabel=\"Close\"\r\n                onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\r\n                isFooterAtBottom={true}\r\n            >\r\n                <TextField\r\n                    className={styles.askSettingsSeparator}\r\n                    defaultValue={promptTemplate}\r\n                    label=\"Override prompt template\"\r\n                    multiline\r\n                    autoAdjustHeight\r\n                    onChange={onPromptTemplateChange}\r\n                />\r\n\r\n                <Slider\r\n                    className={styles.chatSettingsSeparator}\r\n                    label=\"Temperature\"\r\n                    min={0}\r\n                    max={1}\r\n                    step={0.1}\r\n                    defaultValue={temperature}\r\n                    onChange={onTemperatureChange}\r\n                    showValue\r\n                    snapToStep\r\n                />\r\n\r\n                <SpinButton\r\n                    className={styles.askSettingsSeparator}\r\n                    label=\"Retrieve this many search results:\"\r\n                    min={1}\r\n                    max={50}\r\n                    defaultValue={retrieveCount.toString()}\r\n                    onChange={onRetrieveCountChange}\r\n                />\r\n                <TextField className={styles.askSettingsSeparator} label=\"Exclude category\" onChange={onExcludeCategoryChanged} />\r\n\r\n                {showSemanticRankerOption && (\r\n                    <Checkbox\r\n                        className={styles.askSettingsSeparator}\r\n                        checked={useSemanticRanker}\r\n                        label=\"Use semantic ranker for retrieval\"\r\n                        onChange={onUseSemanticRankerChange}\r\n                    />\r\n                )}\r\n\r\n                <Checkbox\r\n                    className={styles.askSettingsSeparator}\r\n                    checked={useSemanticCaptions}\r\n                    label=\"Use query-contextual summaries instead of whole documents\"\r\n                    onChange={onUseSemanticCaptionsChange}\r\n                    disabled={!useSemanticRanker}\r\n                />\r\n\r\n                {showGPT4VOptions && (\r\n                    <GPT4VSettings\r\n                        gpt4vInputs={gpt4vInput}\r\n                        isUseGPT4V={useGPT4V}\r\n                        updateUseGPT4V={useGPT4V => {\r\n                            setUseGPT4V(useGPT4V);\r\n                        }}\r\n                        updateGPT4VInputs={inputs => setGPT4VInput(inputs)}\r\n                    />\r\n                )}\r\n\r\n                {showVectorOption && (\r\n                    <VectorSettings\r\n                        showImageOptions={useGPT4V && showGPT4VOptions}\r\n                        updateVectorFields={(options: VectorFieldOptions[]) => setVectorFieldList(options)}\r\n                        updateRetrievalMode={(retrievalMode: RetrievalMode) => setRetrievalMode(retrievalMode)}\r\n                    />\r\n                )}\r\n\r\n                {useLogin && (\r\n                    <Checkbox\r\n                        className={styles.askSettingsSeparator}\r\n                        checked={useOidSecurityFilter || requireAccessControl}\r\n                        label=\"Use oid security filter\"\r\n                        disabled={!isLoggedIn(client) || requireAccessControl}\r\n                        onChange={onUseOidSecurityFilterChange}\r\n                    />\r\n                )}\r\n                {useLogin && (\r\n                    <Checkbox\r\n                        className={styles.askSettingsSeparator}\r\n                        checked={useGroupsSecurityFilter || requireAccessControl}\r\n                        label=\"Use groups security filter\"\r\n                        disabled={!isLoggedIn(client) || requireAccessControl}\r\n                        onChange={onUseGroupsSecurityFilterChange}\r\n                    />\r\n                )}\r\n                {useLogin && <TokenClaimsDisplay />}\r\n            </Panel>\r\n        </div>\r\n    );\r\n}\r\n\r\nComponent.displayName = \"Ask\";\r\n"],"names":["Component","isConfigPanelOpen","setIsConfigPanelOpen","useState","promptTemplate","setPromptTemplate","promptTemplatePrefix","setPromptTemplatePrefix","promptTemplateSuffix","setPromptTemplateSuffix","temperature","setTemperature","retrievalMode","setRetrievalMode","RetrievalMode","retrieveCount","setRetrieveCount","useSemanticRanker","setUseSemanticRanker","useSemanticCaptions","setUseSemanticCaptions","useGPT4V","setUseGPT4V","gpt4vInput","setGPT4VInput","GPT4VInput","excludeCategory","setExcludeCategory","question","setQuestion","vectorFieldList","setVectorFieldList","VectorFieldOptions","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","showGPT4VOptions","setShowGPT4VOptions","showSemanticRankerOption","setShowSemanticRankerOption","showVectorOption","setShowVectorOption","lastQuestionRef","useRef","isLoading","setIsLoading","error","setError","answer","setAnswer","activeCitation","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","client","useLogin","useMsal","getConfig","token","getToken","configApi","config","useEffect","makeApiRequest","request","result","askApi","e","onPromptTemplateChange","_ev","newValue","onTemperatureChange","range","event","onRetrieveCountChange","onUseSemanticRankerChange","checked","onUseSemanticCaptionsChange","onExcludeCategoryChanged","onExampleClicked","example","onShowCitation","citation","AnalysisPanelTabs","onToggleTab","tab","onUseOidSecurityFilterChange","onUseGroupsSecurityFilterChange","jsxs","styles","jsx","SettingsButton","QuestionInput","Spinner","ExampleList","Answer","x","AnswerError","AnalysisPanel","Panel","DefaultButton","TextField","Slider","SpinButton","Checkbox","GPT4VSettings","inputs","VectorSettings","options","requireAccessControl","isLoggedIn","TokenClaimsDisplay"],"mappings":"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"}